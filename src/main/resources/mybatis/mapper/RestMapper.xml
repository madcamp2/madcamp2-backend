<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.everytask.model.dao.RestMapper">

    <select id="getAllUserList" resultType="com.example.everytask.model.dto.UserObject">
        SELECT * FROM user;
    </select>

    <select id="getSingleUser" resultType="com.example.everytask.model.dto.UserObject">
        SELECT * FROM user WHERE id = #{userId};
    </select>

    <select id="findByEmail" resultType="com.example.everytask.model.dto.UserObject">
        SELECT * FROM user WHERE email = #{email} LIMIT 1;
    </select>

    <insert id="addUser" parameterType="com.example.everytask.model.dto.UserObject">
        INSERT INTO user(name, auth_type, email, password) VALUES (#{item.name}, #{item.auth_type}, #{item.email}, #{item.password});
    </insert>

    <select id="getIdFromUserEmail"  resultType="int">
        SELECT id FROM user WHERE email = #{email} LIMIT 1;
    </select>

    <select id="getNameFromUserID"  resultType="String">
        SELECT name FROM user WHERE id = #{id} LIMIT 1;
    </select>

    <select id="getNameFromOrgID"  resultType="String">
        SELECT name FROM organization WHERE id = #{id} LIMIT 1;
    </select>

    <select id="getOrgsFromUserId"  resultType="com.example.everytask.model.dto.Organization">
        SELECT * FROM organization as A inner join belongs as B ON A.id=B.organization_id and B.user_id=#{id};
    </select>

    <select id="getFollowersFromUserId" resultType="com.example.everytask.model.dto.SimpleUserObject">
        SELECT id, name, email FROM user as A inner join follows as B ON A.id=B.from_id and B.to_id=#{id};
    </select>

    <select id="getFollowsFromUserId" resultType="com.example.everytask.model.dto.SimpleUserObject">
        SELECT id, name, email FROM user as A inner join follows as B ON A.id=B.to_id and B.from_id=#{id};
    </select>

    <select id="getCourseListFromKeyword" resultType="com.example.everytask.model.dto.CourseObject">
        SELECT * FROM course where course_name like CONCAT('%',#{keyword},'%') OR course_code like CONCAT('%',#{keyword},'%');
    </select>

    <select id="getCourseFollowersFromCourseID" resultType="int">
        SELECT COUNT(A.user_id) FROM takes as A inner join course as B ON A.course_id = B.id AND B.id = #{courseId};
    </select>

    <select id="getUserToDo" resultType="com.example.everytask.model.dto.UserToDo">
        SELECT * FROM task where user_id = #{userId};
    </select>

    <select id="getRecationsFromTaskId" resultType="com.example.everytask.model.dto.SimpleUserObject">
        SELECT A.id, A.name, A.email FROM user as A inner join likes as B on A.id=B.user_id and B.task_id = #{id};
    </select>

    <select id="findKakaoId" resultType="int">
        SELECT COUNT(*) FROM user WHERE email = #{kakaoId};
    </select>

    <select id="getSortedPopularView" resultType="com.example.everytask.model.dto.SortedUserView">
        select A.id, A.name, count(B.to_id) as followers from user as A inner join follows as B on B.to_id=A.id
        WHERE A.name != #{currentName} and A.id not in (select to_id from follows where from_id = #{currentId}) GROUP BY A.id, A.name ORDER BY followers DESC LIMIT #{num};
    </select>

    <select id="getSortedPopularCourseView" resultType="com.example.everytask.model.dto.SortedCourseView">
        select A.id as course_id, A.course_name, count(B.course_id) as followers from course as A inner join takes as B on B.course_id=A.id
        WHERE A.year = #{year} GROUP BY A.id, A.course_name ORDER BY followers DESC LIMIT #{num};
    </select>

    <update id="modifyTask">
        UPDATE task SET contents = #{contents} WHERE id=#{num};
    </update>

    <delete id="deleteTask">
        DELETE FROM task WHERE id = #{task_id} AND user_id = #{user_id};
    </delete>

    <select id="retrieveTaskByDate" resultType="com.example.everytask.model.dto.TaskView">
        SELECT * FROM task WHERE user_id = #{user_id} AND date = #{dateString};
    </select>

    <select id="findIsUserFollowingCourse" resultType="int">
        SELECT COUNT(*) FROM takes WHERE user_id = #{user_id} AND course_id = #{course_id}
    </select>

    <insert id="followCourse">
        INSERT INTO takes VALUES(#{user_id}, #{course_id});
    </insert>

    <delete id="unFollowCourse">
        DELETE FROM takes WHERE user_id = #{user_id} AND course_id = #{course_id};
    </delete>

    <select id="findCourseName" resultType="String">
        SELECT course_name FROM course WHERE id = #{course_id} LIMIT 1;
    </select>

    <select id="findIsUserLikesTask" resultType="int">
        SELECT count(*) from likes WHERE user_id = #{user_id} and task_id = #{task_id};
    </select>

    <select id="findTaskLikes" resultType="int">
        SELECT count(*) from likes WHERE task_id = #{task_id};
    </select>

    <insert id="likesTask">
        INSERT INTO likes VALUES(#{user_id}, #{task_id});
    </insert>

    <delete id="unLikesTask">
        DELETE FROM likes WHERE user_id=#{user_id} AND task_id = #{task_id};
    </delete>

</mapper>

<!--Mybatis 에서 Mapper Interface 제공-->
<!--DAO 대신 제공되는 Mapper Interface를 사용하며, 해당 파일은 mybatis를 이용해 분리한 sql문들을 저장하는 파일이다.-->
<!--쿼리가 필요한 경우 질의문을 관리하는 Mapper파일(해당 파일)로 요청이 온다.-->